if (!request("isSelection") || !request()->has("isSelection")) {
            abort_if(!app("auth")->user()->hasPermissionTo('view all jobs'), 403);
        }

        $search = request('search') ?? "";
        $sortBy = request('sortBy') ?? "name";
        $sortType = request('sortType') ?? "asc";
        $itemsPerPage = request('itemsPerPage') ?? 10;

        $jobs = Job::with(['department' => function ($query) {
            if (request()->has("isDeleted") && request("isDeleted")) {
                $query->withTrashed();
            }
        }]);

        if (request()->has('status')) {
            switch (request('status')) {
                case 'Archived':
                    // abort(500);
                    $jobs = $jobs->onlyTrashed();
                    // $jobs = $jobs->where("deleted_at", "<>", null);
                    break;
                default:
                    $jobs = $jobs;
                    break;
            }
        }

        if (request()->has('department_id')) {
            if (request('department_id') > 0) {
                $jobs = $jobs->where('id', 1);
                // $jobs = $jobs->where('department_id', request('department_id'));
            }
        }

        $jobs = $jobs->where('jobs.name', "like", "%" . $search . "%")
            ->orWhereHas('department', function ($q) use ($search) {
                $q->where('name', "like", "%" . $search . "%");
            });

        switch ($sortBy) {
            case 'name':
                $jobs = $jobs->orderBy("name", $sortType);
                break;
            case 'department.name':
                $jobs = $jobs->leftJoin('departments', 'jobs.department_id', '=', 'departments.id')
                    ->select('jobs.*')
                    ->orderBy('departments.name', $sortType);
                break;
            default:
                $jobs =  $jobs;
                break;
        }

        $jobs = $jobs->paginate($itemsPerPage);

        return JobResource::collection($jobs);